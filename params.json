{"name":"Cloudstack-cli","tagline":"cloudstack-cli is a CloudStack API client written in Ruby","body":"# Cloudstack CLI\r\n\r\n[![Gem Version](https://badge.fury.io/rb/cloudstack-cli.png)](http://badge.fury.io/rb/cloudstack-cli)\r\n\r\ncloudstack-cli is a [CloudStack](http://cloudstack.apache.org/) API command line client written in Ruby.\r\ncloudstack-cli uses the [cloudstack_client](https://github.com/niwo/cloudstack_client) to talk to the Cloudstack API.\r\n\r\n## Installation\r\n\r\nInstall the cloudstack-cli gem:\r\n\r\n```sh\r\n$ gem install cloudstack-cli\r\n```\r\n\r\n## Setup\r\n\r\n### Create a cloudstack-cli environmet\r\n\r\nCreate your first environment, which defines your connection options:\r\n\r\n```sh\r\n$ cs environment add [environment-name]\r\n```\r\n\r\ncloudstack-cli expects to find a configuartion file with the API URL and your CloudStack credentials in your home directory named .cloudstack-cli.yml. If the file is located elsewhere you can specify the loaction using the --config option.\r\n\r\ncloudstack-cli supports multiple environments using the --environment option.\r\n\r\nsee `cs help environment` for more options. \r\n\r\nExample content of the configuration file:\r\n\r\n```yaml\r\n:url:         \"https://my-cloudstack-server/client/api/\"\r\n:api_key:     \"cloudstack-api-key\"\r\n:secret_key:  \"cloudstack-api-secret\"\r\n\r\ntest:\r\n    :url:           \"http://my-cloudstack-testserver/client/api/\"\r\n    :api_key:       \"cloudstack-api-key\"\r\n    :secret_key:    \"cloudstack-api-secret\"\r\n```\r\n\r\n### Shell tab auto-completion\r\n\r\nTo enable tab auto-completion for cloudstack-cli, add the following lines to your ~/.bash_profile file.\r\n\r\n```sh\r\n# Bash, ~/.bash_profile\r\neval \"$(cs completion --shell=bash)\"\r\n```\r\n\r\n__Note__: use `~/.bashrc` on Ubuntu\r\n\r\n## Usage\r\n\r\nFor additional documentation find the RubyDoc [here](http://rubydoc.info/gems/cloudstack-cli/).\r\n\r\nSee the help screen:\r\n\r\n```sh\r\n$ cs\r\n```\r\n\r\n### Example: Bootsrapping a server\r\n\r\nBootsraps a server using a template and creating port-forwarding rules for port 22 and 80.\r\n\r\n```sh\r\n$ cs server create server-01 --template CentOS-6.4-x64-v1.4 --zone DC1 --offering 1cpu_1gb --port-rules :22 :80\r\n```\r\n\r\n### Example: Run a any custom API command\r\n\r\nRun the \"listAlerts\" command against the Cloudstack API with an argument of type=8:\r\n\r\n```sh\r\n$ cs command listAlerts type=8\r\n```\r\n\r\n### Example: Creating a complete stack of servers\r\n\r\nAn example stackfile looks like this (my_stackfile.json)\r\n\r\n```json\r\n{\r\n    \"name\": \"web_stack-a\",\r\n    \"description\": \"Web Application Stack\",\r\n    \"version\": \"1.0\",\r\n    \"zone\": \"DC-BIE-1\",\r\n    \"group\": \"my_web_stack\",\r\n    \"keypair\": \"mykeypair\",\r\n    \"servers\": [\r\n        {\r\n            \"name\": \"web-d1, web-d2\",\r\n            \"description\": \"Web nodes\",\r\n            \"template\": \"CentOS-6.4-x64-v1.2\",\r\n            \"offering\": \"1cpu_1gb\",\r\n            \"networks\": \"server_network\",\r\n            \"port_rules\": \":80, :443\"\r\n        },\r\n        {\r\n            \"name\": \"db-01\",\r\n            \"description\": \"PostgreSQL Master\",\r\n            \"iso\": \"CentOS-6.4-x86_64-swisstxt-v15\",\r\n            \"disk_offering\": \"Perf Storage\",\r\n            \"disk_size\": \"5\",\r\n            \"offering\": \"2cpu_4gb\",\r\n            \"networks\": [\r\n                \"server_network\",\r\n                \"storage_network\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nCreate the stack of servers from above:\r\n\r\n```sh\r\n$ cs stack create my_stackfile.json\r\n```\r\n\r\n### Example: Sort computing offerings\r\n\r\nSort all computing offerings by CPU and Memory grouped my Domain:\r\n\r\n```sh\r\n$ cs offering sort\r\n```\r\n\r\n### Example: Stop all backup routers of a given project\r\n\r\nStop all virtual routers of project Demo (you could filter by zone too):\r\n(This command is helpful if you have to deploy new versions of Cloudstack when using redundant routers)\r\n\r\n```sh\r\n$ cs router list --project Demo --status running --redundant-state BACKUP --command stop\r\n````\r\n\r\nHint: You can watch the status of the command with watch.\r\n\r\n```sh\r\n$ watch -n cs router list --project Demo\r\n```\r\n\r\n\r\n## References\r\n-  [Cloudstack API documentation](http://cloudstack.apache.org/docs/api/)\r\n-  This tool was inspired by the Knife extension for Cloudstack: [knife-cloudstack](https://github.com/CloudStack-extras/knife-cloudstack)\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\nReleased under the MIT License. See the [LICENSE](https://raw.github.com/niwo/cloudstack-cli/master/LICENSE.txt) file for further details.","google":"UA-43124138-1","note":"Don't delete this file! It's used internally to help with page regeneration."}